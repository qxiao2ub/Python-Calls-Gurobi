from gurobipy import *

fixedCosts=[3500,9000,10000,4000,3000,9000,9000,3000,4000,10000,9000,3500]

transCosts= [[100,180,50,50,60,100,120,90,60,70,65,110],
             [120,90,60,70,65,110,140,110,80,80,75,130],
             [140,110,80,80,75,130,160,125,100,100,80,150],
             [160,125,100,100,80,150,190,150,130,9999999,9999999,9999999],
             [190,150,130,9999999,9999999,9999999,200,180,150,9999999,9999999,9999999],
             [200,180,150,9999999,9999999,9999999,100,80,50,50,60,100],
             [100,80,50,50,60,100,120,90,60,70,65,100],
             [120,90,60,70,65,110,140,110,80,80,72,130],
             [140,110,80,80,75,130,160,125,100,100,80,150],
             [160,125,100,100,80,150,190,150,130,9999999,9999999,9999999],
             [190,150,130,9999999,9999999,9999999,200,180,150,9999999,9999999,9999999],
             [200,180,150,9999999,9999999,9999999,100,80,50,50,60,100]]

unittransCosts= [[100/120,180/80,50/75,50/100,60/110,100/100,120/90,90/60,60/30,70/150,65/95,110/120],
                [120/120,90/80,60/75,70/100,65/110,110/100,140/90,110/60,80/30,80/150,75/95,130/120],
                [140/120,110/80,80/75,80/100,75/110,130/100,160/90,125/60,100/30,100/150,80/95,150/120],
                [160/120,125/80,100/75,100/100,80/110,150/100,190/90,150/60,130/30,9999999,9999999,9999999],
                [190/120,150/80,130/75,9999999/1,9999999/1,9999999/1,200/90,180/60,150/30,9999999,9999999,9999999],
                [200/120,180/80,150/75,9999999/1,9999999/1,9999999/1,100/90,80/60,50/30,50/150,60/95,100/120],
                [100/120,80/80,50/75,50/100,60/110,100/100,120/90,90/60,60/30,70/150,65/95,100/120],
                [120/120,90/80,60/75,70/100,65/110,110/100,140/90,110/60,80/30,80/150,72/95,130/120],
                [140/120,110/80,80/75,80/100,75/110,130/100,160/90,125/60,100/30,100/150,80/95,150/120],
                [160/120,125/80,100/75,100/100,80/110,150/100,190/90,150/60,130/30,9999999,9999999,9999999],
                [190/120,150/80,130/75,9999999/1,9999999/1,9999999/1,200/90,180/60,150/30,9999999,9999999,9999999],
                [200/120,180/80,150/75,9999999/1,9999999/1,9999999/1,100/90,80/60,50/30,50/150,60/95,100/120]]

demand=[120,80,75,100,110,100,90,60,30,150,95,120]

capacity=[300,250,100,180,275,300,200,220,270,250,230,180]

depots = range(len(capacity))
customers = range(len(demand))

model=Model("depots")

open = model.addVars(depots,vtype=GRB.BINARY,obj=fixedCosts,name="open")

#here I should consider devided by dj
transport = model.addVars(depots, customers, obj=unittransCosts, name="trans amount")

model.modelSense = GRB.MINIMIZE

model.addConstrs(transport.sum('*',d) <= capacity[d] * open[d] for d in depots)

model.addConstrs((transport.sum(c) == demand[c] for c in customers),"Demand")

model.write('h1p3.lp')

model.optimize()

print('\nTotal cost: %g' % model.objVal)
print('Results:')
for d in depots:
    if open[d].x > 0.9999:
        print('Depot %s is open' % (d+1))
        #for c in customers:
            #if transport[c,d].x > 0:
            #    print(' Tansport %g units to ware house %s')
